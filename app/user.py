from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext


from app.database.requests import set_user, update_user, select_user
import app.keyboards as kb

user = Router()

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–º—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –∏–º—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    is_user = await set_user(message.from_user.id)
    if not is_user:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–∫–æ–µ –∂–µ üëá",
            reply_markup=await kb.user_name(message.from_user.first_name),
        )
        await state.set_state("reg_name")
    else:
        await message.answer(
            f"{await select_user(message.from_user.id)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚¨áÔ∏è",
            reply_markup=kb.menu,
        )


"""
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –∏–º–µ–Ω–∏ –≤ –ë–î
"""


@user.message(StateFilter("reg_name"))
async def get_reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.capitalize())
    data = await state.get_data()
    await update_user(message.from_user.id, data["name"])
    await message.answer(
        f"{await select_user(message.from_user.id)}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! ‚úÖ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã",
        reply_markup=kb.menu,
    )
    await state.clear()


@user.message(F.text == "üìï –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëÄ", reply_markup=await kb.categories())


@user.callback_query(F.data.startswith("category_"))
async def cards(callback: CallbackQuery):
    await callback.answer()
    category_id = callback.data.split("_")[1]
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=await kb.cards(category_id)
    )
